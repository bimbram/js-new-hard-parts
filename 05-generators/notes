006 - Async Generators Q&A
-Async is creating more readibility than the callback model


005 - Async Generators
-We can use the ability to pause createFlow's running and then restart it only when our data returns

functiond doWhenDataReceived(value) {
  returnNextElement.next(value)
}

function* createFlow() {
  const data = yield fetch('http//twitter.com/will/tweets/1');
  console.log(data)
}

const returnNextElement = createFlow();
const futureData = returnNextElement.next()

futureData.then(doWhenDataReceived);



004 - Introducing Async Generators
-Simple introduction

003 - Generators Q&A
-Generators is a brand new feature (ES7)
-Generators are in python too
-We can treat yield just like a return statement

-And most importantly, for the first time we get to pause ('suspend') a function being run and then return to it by calling returnNextElement.next()

In asynchronous javascript we want to
1. Initiate a task that takes a long time (e.g. requesting data from the server)
2. Move on to more synchronous regular code in the meantime
3. Run some functionality once the requested data has come back

What if we were to yield out of the function at the moment of sending off the long-time task and return to the function only when the task is complete

-We can use the ability to pause createFlow's running and then restart it only when our data returns

function doWhenDataReceived(value) {
  returnNextElement.next(value)
}

function* createFlow() {
  const data = yield fetch('http://twitter.com/will/tweets/1')
  console.log(data)
}

const returnNextElement = createFlow()
const futureData = returnNextElement.next()

futureData.then(doWhenDataReceived)

We get to control when we return back to createFlow and continue executing - by setting up the trigger to do so (returnNextElement()) to be run by our function that was triggered by the promise resolution (when the value returned from twitter)

002 - Generator Functions with Dynamic Data
-Execution context is position in a code and a memory
-This allows us to dynamically set what data flows to us (when we run returnNextElement's function)

function *createFlow() {
  const num = 10
  const newNum = yield num
  yield 5 + newNum
  yield 6
}

const returnNextElement = createFlow();
const element1 = returnNextElement.next() // 10
const element2 = returnNextElement.next(2) // 7


001 - Generators
-Once we start thinking our data as flows (where we can pick of an element one-by-one) we can rethink how we produce those flows - JavaScript now lets us produce the flows using a function

function *createFlow() {
  yield4
  yield5
  yield6
}

const returnNextElement = createFlow()
const element1 = returnNextElement().next();
const element2 = returnNextElement().next()

What do we hope returnNextElement.next() will return? But how?
